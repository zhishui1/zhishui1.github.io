<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Pythonic Coding</title>
    <url>/post/Python/effective-python/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p><a href="https://book.douban.com/subject/26709315/" target="_blank" rel="noopener">Effective Python</a>学习笔记<a id="more"></a></p><h2 id="程序风格"><a href="#程序风格" class="headerlink" title="程序风格"></a>程序风格</h2><h3 id="遵循PEP8风格指南"><a href="#遵循PEP8风格指南" class="headerlink" title="遵循PEP8风格指南"></a>遵循PEP8风格指南</h3><p><a href="https://www.python.org/dev/peps/pep-0008" target="_blank" rel="noopener">《Python Enhancement Proposal #8》</a>，简称PEP8，是针对Python代码格式编订的风格指南。</p><h3 id="bytes、str与unicode区别"><a href="#bytes、str与unicode区别" class="headerlink" title="bytes、str与unicode区别"></a>bytes、str与unicode区别</h3><h4 id="首先区分Python3与Python2的两种表示字符序列的类型"><a href="#首先区分Python3与Python2的两种表示字符序列的类型" class="headerlink" title="首先区分Python3与Python2的两种表示字符序列的类型"></a>首先区分Python3与Python2的两种表示字符序列的类型</h4><ul><li>Python3，bytes与str，前者的实例包含原始的8位值，即原始的字节，包含8个二进制位；后者的实例包含Unicode字符</li><li>Python2，str与unicode，前者的实例包含原始的8位值；后者的实例包含Unicode字符</li></ul><h4 id="二进制数据与Unicode字符相互转换"><a href="#二进制数据与Unicode字符相互转换" class="headerlink" title="二进制数据与Unicode字符相互转换"></a>二进制数据与Unicode字符相互转换</h4><p>常见编码方式为UTF-8<br>Unicode字符 → 二进制数据，encode()方法<br>二进制数据 → Unicode字符，decode()方法</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">to_bytes</span><span class="params">(bytes_or_str)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> isinstance(bytes_or_str, str):</span><br><span class="line">        value = bytes_or_str.encode(<span class="string">'utf8'</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        value = bytes_or_str</span><br><span class="line">    <span class="keyword">return</span> value</span><br></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">to_str</span><span class="params">(bytes_or_str)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> isinstance(bytes_or_str, bytes):</span><br><span class="line">        value = bytes_or_str.decode(<span class="string">'utf8'</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        value = bytes_or_str</span><br><span class="line">    <span class="keyword">return</span> value</span><br></pre></td></tr></table></figure><p>注：</p><ul><li>Python程序中，编码和解码操作放在程序外围，核心部分使用Unicode字符类型</li><li>在只处理7位ASCII时，Python2的str和unicode类型的实例可以等价，而Python3中bytes与str的实例绝对不等价</li><li>Python3中，使用内置open()函数获取文件句柄，该句柄默认采用UTF-8格式来操作文件，问题在于Python3给open()函数添加了名为encoding的新参数，其默认值为’utf-8’，要求必须传入包含Unicode字符的str实例，而不接受包含二进制数据的bytes实例<br>总结为必须使用二进制写入模式open(path, ‘wb’)来开启待操作文件</li></ul><h3 id="用辅助函数取代复杂表达式"><a href="#用辅助函数取代复杂表达式" class="headerlink" title="用辅助函数取代复杂表达式"></a>用辅助函数取代复杂表达式</h3><p>如，从字典中查询并返回得到的第一个整数值:<br><code>red = my_values.get(&#39;red&#39;, [&#39;&#39;])[0] or 0</code><br>未查询到或值为0为空统一返回0，该表达式不易理解，若要频繁使用，将其总结为辅助函数：</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_first_int</span><span class="params">(values, key, default=<span class="number">0</span>)</span>:</span></span><br><span class="line">    found =values.get(key, [<span class="string">''</span>])</span><br><span class="line">    <span class="keyword">if</span> found[<span class="number">0</span>]:</span><br><span class="line">        found = int(found[<span class="number">0</span>])</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        found = default</span><br><span class="line">    <span class="keyword">return</span> found</span><br><span class="line"></span><br><span class="line">red = get_first_int(my_values, <span class="string">'red'</span>)</span><br></pre></td></tr></table></figure><h3 id="切片操作"><a href="#切片操作" class="headerlink" title="切片操作"></a>切片操作</h3><h4 id="基本写法"><a href="#基本写法" class="headerlink" title="基本写法"></a>基本写法</h4><p>somelist[start:end]，其中start所指元素涵盖在切割后的范围内，end所指元素不包括在切割结果之中。例：</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment">#start从0开始，end倒数从-1开始</span></span><br><span class="line">a[:]                                    <span class="comment">#[1,2,3,4,5,6]</span></span><br><span class="line">a[:<span class="number">3</span>]                                   <span class="comment">#[1,2,3]</span></span><br><span class="line">a[<span class="number">2</span>:]                                   <span class="comment">#[3,4,5,6]</span></span><br><span class="line">a[<span class="number">2</span>:<span class="number">5</span>]                                  <span class="comment">#[3,4,5]</span></span><br><span class="line">a[<span class="number">-3</span>:<span class="number">-1</span>]                                <span class="comment">#[4,5]</span></span><br></pre></td></tr></table></figure><p>切割列表时，start和end越界不会出问题，利用该特性可以限定输入序列的最大长度。</p><figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">first_nine_items</span> = a[:<span class="number">9</span>]</span><br><span class="line"><span class="attr">last_nine_items</span> = a[<span class="number">9</span>:]</span><br></pre></td></tr></table></figure><p>切片后不影响原列表，对list赋值，若使用切片操作，会把原列表处在相关范围内的值替换为新值，即便长度不同也可以替换。</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">a[<span class="number">2</span>:<span class="number">5</span>] = [<span class="number">1</span>,<span class="number">1</span>]                          <span class="comment">#[1,2,1,1,6]</span></span><br><span class="line">a[:] = [<span class="number">1</span>,<span class="number">1</span>]                            <span class="comment">#[1,1]</span></span><br></pre></td></tr></table></figure><h4 id="步进式切割"><a href="#步进式切割" class="headerlink" title="步进式切割"></a>步进式切割</h4><p>somelist[start:end:stride]</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]</span><br><span class="line">odds = a[::<span class="number">2</span>]</span><br><span class="line">evens = a[<span class="number">1</span>::<span class="number">2</span>]</span><br><span class="line">b = <span class="string">b'abc'</span></span><br><span class="line">reverse = b[::<span class="number">-1</span>]                       <span class="comment">#负值为反向步进</span></span><br></pre></td></tr></table></figure><p>注：</p><ul><li>负步长只对字节串和ASCII字符有效，对已编码成UTF-8字节串的Unicode字符无效</li><li>尽量使用stride为正数，且不带start和end索引</li><li>同一切片操作内，不要同时指定start、end和stride，考虑将其拆解为一条步进切割，一条范围切割</li></ul><h3 id="列表与迭代"><a href="#列表与迭代" class="headerlink" title="列表与迭代"></a>列表与迭代</h3><h4 id="用列表推导取代map和filter"><a href="#用列表推导取代map和filter" class="headerlink" title="用列表推导取代map和filter"></a>用列表推导取代map和filter</h4><p><strong>列表推导</strong>(list comprehension)，根据一份列表来制作另外一份。<br><strong>字典</strong>(dict)与<strong>集</strong>(set)也支持推导表达式</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">#使用map，创建lambda函数，结合filter</span></span><br><span class="line">squares = map(<span class="keyword">lambda</span> x: x**<span class="number">2</span>, a)</span><br><span class="line">even_squares = map(<span class="keyword">lambda</span> x: x**<span class="number">2</span>, filter(<span class="keyword">lambda</span> x: x % <span class="number">2</span> == <span class="number">0</span>, a))</span><br><span class="line"></span><br><span class="line"><span class="comment">#使用列表推导</span></span><br><span class="line">squares = [x**<span class="number">2</span> <span class="keyword">for</span> x <span class="keyword">in</span> a]</span><br><span class="line">even_squares = [x**<span class="number">2</span> <span class="keyword">for</span> x <span class="keyword">in</span> a <span class="keyword">if</span> x % <span class="number">2</span> == <span class="number">0</span>]</span><br></pre></td></tr></table></figure><h4 id="列表推导内含的表达式不宜超过两个"><a href="#列表推导内含的表达式不宜超过两个" class="headerlink" title="列表推导内含的表达式不宜超过两个"></a>列表推导内含的表达式不宜超过两个</h4><p>列表推导支持多重循环</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">matrix = [[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>], [<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]]</span><br><span class="line"></span><br><span class="line"><span class="comment">#矩阵简化为一维列表</span></span><br><span class="line">flat = [x <span class="keyword">for</span> row <span class="keyword">in</span> matrix <span class="keyword">for</span> x <span class="keyword">in</span> row]                  <span class="comment">#[1, 2, 3, 4, 5, 6, 7, 8, 9]</span></span><br><span class="line"></span><br><span class="line">squared = [[x**<span class="number">2</span> <span class="keyword">for</span> x <span class="keyword">in</span> row] <span class="keyword">for</span> row <span class="keyword">in</span> matrix]          <span class="comment">#[[1, 4, 9], [16, 25, 36], [49, 64, 81]]</span></span><br></pre></td></tr></table></figure><p>每一级循环也支持多重条件</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment">#处在同一循环级别中的多项条件， 彼此之间默认形成and表达式</span></span><br><span class="line">b = [x <span class="keyword">for</span> x <span class="keyword">in</span> a <span class="keyword">if</span> x &gt; <span class="number">4</span> <span class="keyword">if</span> x % <span class="number">2</span> == <span class="number">0</span>]</span><br><span class="line">b = [x <span class="keyword">for</span> x <span class="keyword">in</span> a <span class="keyword">if</span> x &gt; <span class="number">4</span> <span class="keyword">and</span> x % <span class="number">2</span> == <span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">#从矩阵中取出本身能被3整除，且其所在行所有元素之和大于等于10的元素</span></span><br><span class="line">filtered = [[x <span class="keyword">for</span> x <span class="keyword">in</span> row <span class="keyword">if</span> x % <span class="number">3</span> == <span class="number">0</span>] </span><br><span class="line">            <span class="keyword">for</span> row <span class="keyword">in</span> matrix <span class="keyword">if</span> sum(row) &gt;= <span class="number">10</span>]</span><br></pre></td></tr></table></figure><h4 id="用生成器表达式改写数据量较大的列表推导"><a href="#用生成器表达式改写数据量较大的列表推导" class="headerlink" title="用生成器表达式改写数据量较大的列表推导"></a>用生成器表达式改写数据量较大的列表推导</h4><p>首先，列表推导的缺点是：<br>在推导过程中，对于输入序列中的每个值，可能都要创建一个仅含一个元素的新列表，若输入数据量较大，会消耗大量内存。<br>如，读取一份文件并返回每行的字符数，采用列表推导</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">value = [len(x) <span class="keyword">for</span> x <span class="keyword">in</span> open(file)]</span><br></pre></td></tr></table></figure><p><strong>生成器表达式</strong>(generator expression)：<br>对列表推导和生成器的一种<strong>泛化</strong>(generalization)，生成器表达式运行时，不会呈现整个输出序列，而是估值为<strong>迭代器</strong>(iterator)，该迭代器每次根据生成器表达式产生一项数据。</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment">#生成器表达式，立刻返回一个迭代器</span></span><br><span class="line">it = (len(x) <span class="keyword">for</span> x <span class="keyword">in</span> open(file))</span><br><span class="line">next(it)</span><br><span class="line"></span><br><span class="line"><span class="comment">#生成器表达式可以互相组合</span></span><br><span class="line">roots = ((x, x**<span class="number">0.5</span>) <span class="keyword">for</span> x <span class="keyword">in</span> it)</span><br></pre></td></tr></table></figure><h4 id="用enumerate取代range"><a href="#用enumerate取代range" class="headerlink" title="用enumerate取代range"></a>用enumerate取代range</h4><p>enumerate可以把各种迭代器包装为生成器，在同时需要下标和值的时候使用。<br>如</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">list_num = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(list_num)):</span><br><span class="line">    num = list_num[i]</span><br><span class="line">    print(<span class="string">'%d:%s'</span>, %(i+<span class="number">1</span>, num))</span><br></pre></td></tr></table></figure><p>使用enumerate</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">list_num = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>]</span><br><span class="line"><span class="keyword">for</span> i, num <span class="keyword">in</span> enumerator(list_num, <span class="number">1</span>):                  <span class="comment">#起始下标指定为1</span></span><br><span class="line">    print(<span class="string">'%d:%s'</span>, %(i, num))</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>使用Python自动化控制鼠标和键盘</title>
    <url>/post/Python/auto-gui-with-python/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>文档：<a href="https://pyautogui.readthedocs.io/en/latest/" target="_blank" rel="noopener">https://pyautogui.readthedocs.io/en/latest/</a><a id="more"></a></p><h2 id="安装pyautogui模块"><a href="#安装pyautogui模块" class="headerlink" title="安装pyautogui模块"></a>安装pyautogui模块</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">pip install pyautogui</span><br></pre></td></tr></table></figure><h2 id="鼠标操作模拟"><a href="#鼠标操作模拟" class="headerlink" title="鼠标操作模拟"></a>鼠标操作模拟</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pyautogui</span><br><span class="line"></span><br><span class="line">width, height = pyautogui.size()            <span class="comment">#返回屏幕宽高像素数的元组</span></span><br><span class="line">pyautogui.position()                        <span class="comment">#返回鼠标当前位置元组</span></span><br><span class="line"></span><br><span class="line">pyautogui.moveTo(<span class="number">100</span>, <span class="number">200</span>, duration=<span class="number">1.5</span>)    <span class="comment">#绝对位置移动，参数为x,y,time可选秒数</span></span><br><span class="line">pyautogui.moveRel(<span class="number">100</span>, <span class="number">-1</span>, duration=<span class="number">1</span>)      <span class="comment">#相对位置移动。参数为右,左,时间可选秒数</span></span><br><span class="line"></span><br><span class="line">pyautogui.click(<span class="number">100</span>, <span class="number">200</span>, button=<span class="string">'middle'</span>)    <span class="comment">#完整的单击.默认鼠标左键单击当前位置</span></span><br><span class="line">pyautogui.mouseDown(button=left)            <span class="comment">#按下鼠标按键</span></span><br><span class="line">pyautogui.mouseUp(<span class="number">100</span>, <span class="number">200</span>)                 <span class="comment">#松开鼠标按键</span></span><br><span class="line">pyautogui.doubleClick()                     <span class="comment">#双击鼠标左键</span></span><br><span class="line">pyautogui.middleClick()                     <span class="comment">#单击鼠标中键</span></span><br><span class="line"></span><br><span class="line">pyautogui.dragTo(<span class="number">100</span>, <span class="number">200</span>, duration=<span class="number">1.5</span>)    <span class="comment">#绝对位置拖动，参数为x,y,time可选秒数</span></span><br><span class="line">pyautogui.dragRel(<span class="number">100</span>, <span class="number">-1</span>, button=<span class="string">'middle'</span>) <span class="comment">#相对位置拖动。参数为右,左,button可选默认左键</span></span><br><span class="line"></span><br><span class="line">pyautogui.scroll(<span class="number">-200</span>)                      <span class="comment">#鼠标滚轮上下滚动</span></span><br></pre></td></tr></table></figure><h2 id="处理屏幕"><a href="#处理屏幕" class="headerlink" title="处理屏幕"></a>处理屏幕</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pyautogui</span><br><span class="line"></span><br><span class="line">im = pyautogui.screenshot()                 <span class="comment">#返回包含屏幕快照的Image对象</span></span><br><span class="line">im.getpixel((x,y))                          <span class="comment">#返回坐标处像素颜色的RGB元组</span></span><br><span class="line">pyautogui.pixelMatchesColor(x, y, (R, G, B))<span class="comment">#比较(x,y)处与RGB的颜色是否相同</span></span><br><span class="line"></span><br><span class="line">pyautogui.locateOnScreen(<span class="string">'screenshot.png'</span>)  <span class="comment">#参数或为region=(0,0, 300, 400)</span></span><br><span class="line"><span class="comment">#返回screenshot.png匹配当前屏幕成功的图像左边的x坐标，顶边的y坐标，宽度和高度元组</span></span><br><span class="line">pyautogui.center((<span class="number">0</span>,<span class="number">0</span>, <span class="number">300</span>, <span class="number">400</span>))           <span class="comment">#返回中心坐标</span></span><br><span class="line">pyautogui.click((<span class="number">150</span>, <span class="number">200</span>))</span><br></pre></td></tr></table></figure><h2 id="键盘操作模拟"><a href="#键盘操作模拟" class="headerlink" title="键盘操作模拟"></a>键盘操作模拟</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pyautogui</span><br><span class="line"></span><br><span class="line">pyautogui.typewrite(<span class="string">'test'</span>,<span class="number">0.25</span>)            <span class="comment">#发送单个字符表示的虚拟按键,间隔0.25秒</span></span><br><span class="line">pyautogui.typewrite([<span class="string">'a'</span>, <span class="string">'b'</span>])               <span class="comment">#键名作为参数</span></span><br><span class="line"></span><br><span class="line">pyautogui.keyDown(<span class="string">'ctrl'</span>)</span><br><span class="line">pyautogui.press(<span class="string">'c'</span>)</span><br><span class="line">pyautogui.keyUp(<span class="string">'ctrl'</span>)</span><br><span class="line"><span class="comment">#等价于</span></span><br><span class="line">pyautogui.hotkey(<span class="string">'ctrl'</span>, <span class="string">'c'</span>)</span><br></pre></td></tr></table></figure><p>键名:<a href="https://pyautogui.readthedocs.io/en/latest/keyboard.html#keyboard-keys" target="_blank" rel="noopener">https://pyautogui.readthedocs.io/en/latest/keyboard.html#keyboard-keys</a></p>]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Auto-GUI</tag>
      </tags>
  </entry>
  <entry>
    <title>使用Python处理Excel，CSV和JSON</title>
    <url>/post/Python/excel-csv-json-with-python/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>使用Python处理Excel，CSV文件和JSON文件<a id="more"></a></p><h2 id="python处理excel"><a href="#python处理excel" class="headerlink" title="python处理excel"></a>python处理excel</h2><p>文档：<a href="https://openpyxl.readthedocs.io/en/stable/" target="_blank" rel="noopener">https://openpyxl.readthedocs.io/en/stable/</a></p><h3 id="安装openpyxl模块"><a href="#安装openpyxl模块" class="headerlink" title="安装openpyxl模块"></a>安装openpyxl模块</h3><figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">pip <span class="keyword">install</span> openpyxl</span><br></pre></td></tr></table></figure><h3 id="读取excel"><a href="#读取excel" class="headerlink" title="读取excel"></a>读取excel</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> openpyxl</span><br><span class="line"></span><br><span class="line">wb = openpyxl.load_workbook(<span class="string">'C:\\Users\\test.xlsx'</span>)     <span class="comment">#返回Workbook对象</span></span><br><span class="line">wb.sheetnames                                           <span class="comment">#返回所有工作表名称的字符串列表</span></span><br><span class="line"></span><br><span class="line">sheet = wb[<span class="string">'Sheet'</span>]                                     <span class="comment">#wb.get_sheet_by_name('Sheet')</span></span><br><span class="line">sheet1 = wb.active</span><br><span class="line"></span><br><span class="line">sheet[<span class="string">'A'</span>]                                              <span class="comment">#返回第一列</span></span><br><span class="line">sheet[<span class="string">'A1'</span>].value                                       <span class="comment">#.row .column .coordinate(r+c)</span></span><br><span class="line">sheet.cell(row=<span class="number">1</span>, column=<span class="number">1</span>).value</span><br><span class="line">sheet.max_row                                           <span class="comment">#返回一个整数.max_column</span></span><br><span class="line"></span><br><span class="line">openpyxl.cell.column_index_from_string()                <span class="comment">#列字母转换为数字，A→1</span></span><br><span class="line">openpyxl.cell.get_column_letter()                       <span class="comment">#数字转换为列字母</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#切片，遍历</span></span><br><span class="line"><span class="keyword">for</span> rowObj <span class="keyword">in</span> sheet[<span class="string">'A1'</span>:<span class="string">'D14'</span>]:                        <span class="comment">#每个元组代表一行，按行遍历整个区域</span></span><br><span class="line">    <span class="keyword">for</span> cellObj <span class="keyword">in</span> rowObj:                              <span class="comment">#遍历行中的每个单元格</span></span><br><span class="line">        print(cellObj.coordinate, cellObj.value)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> cellObj <span class="keyword">in</span> list(sheet.rows)[<span class="number">0</span>]:                     <span class="comment">#按行按列遍历,或者 sheet[1] | sheet['A']</span></span><br><span class="line">    print(cellObj.value)</span><br></pre></td></tr></table></figure><h3 id="写入excel"><a href="#写入excel" class="headerlink" title="写入excel"></a>写入excel</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> openpyxl</span><br><span class="line"></span><br><span class="line">wb = openpyxl.Workbook()                                <span class="comment">#新建一个空的Workbook对象</span></span><br><span class="line">sheet = wb.active</span><br><span class="line">sheet.title = <span class="string">'test'</span></span><br><span class="line">sheet[<span class="string">'A1'</span>] = <span class="string">'test'</span>                                    <span class="comment">#将值写入单元格</span></span><br><span class="line"></span><br><span class="line">wb.create_sheet(index=<span class="number">0</span>, title=<span class="string">'ttest'</span>)                 <span class="comment">#新建一个工作表，返回Worksheet对象</span></span><br><span class="line">wb.remove(wb[<span class="string">'Sheet'</span>])                                  <span class="comment">#接受一个Worksheet对象作为其参数</span></span><br><span class="line">wb.save(<span class="string">'C:\\Users\\test.xlsx'</span>)                         <span class="comment">#保存变更，不同名或不同位置会创建副本</span></span><br></pre></td></tr></table></figure><h3 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h3><h4 id="更新excel表"><a href="#更新excel表" class="headerlink" title="更新excel表"></a>更新excel表</h4><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> openpyxl</span><br><span class="line"></span><br><span class="line">update_data = &#123;<span class="string">'apple'</span>:<span class="number">5</span>,</span><br><span class="line">               <span class="string">'lemon'</span>:<span class="number">1</span>,</span><br><span class="line">               <span class="string">'orange'</span>:<span class="number">2</span>&#125;                              <span class="comment">#待更新数据保存在字典中</span></span><br><span class="line">wb = openpyxl.load_workbook(<span class="string">'C:\\Users\\test.xlsx'</span>)</span><br><span class="line">sheet = wb[<span class="string">'Sheet'</span>]</span><br><span class="line"><span class="keyword">for</span> rowNum <span class="keyword">in</span> range(<span class="number">2</span>, sheet.max_row+<span class="number">1</span>):</span><br><span class="line">    updatedName = sheet.cell(row=rowNum, column=<span class="number">1</span>).value</span><br><span class="line">    <span class="keyword">if</span> updatedName <span class="keyword">in</span> update_data:</span><br><span class="line">        sheet.cell(row=rowNum, column=<span class="number">2</span>).value = update_data[updatedName]</span><br><span class="line">wb.save(<span class="string">'C:\\Users\\test_updated.xlsx'</span>)</span><br></pre></td></tr></table></figure><h4 id="字体风格"><a href="#字体风格" class="headerlink" title="字体风格"></a>字体风格</h4><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> openpyxl.styles <span class="keyword">import</span> Font</span><br><span class="line">fontObj = Font(name=<span class="string">'Calibri'</span>, size=<span class="number">12</span>, bold=true, italic=true)</span><br><span class="line">sheet[<span class="string">'A1'</span>].font = fontObj</span><br></pre></td></tr></table></figure><h4 id="公式"><a href="#公式" class="headerlink" title="公式"></a>公式</h4><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">sheet.row_dimensions[<span class="number">1</span>].height = <span class="number">0</span><span class="number">-409</span></span><br><span class="line">sheet.column_dimensions[<span class="string">'A'</span>].width = <span class="number">0</span><span class="number">-255</span></span><br></pre></td></tr></table></figure><h4 id="行高列宽"><a href="#行高列宽" class="headerlink" title="行高列宽"></a>行高列宽</h4><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">sheet.row_dimensions[<span class="number">1</span>].height = <span class="number">0</span><span class="number">-409</span></span><br><span class="line">sheet.column_dimensions[<span class="string">'A'</span>].width = <span class="number">0</span><span class="number">-255</span></span><br></pre></td></tr></table></figure><h4 id="合并拆分冻结"><a href="#合并拆分冻结" class="headerlink" title="合并拆分冻结"></a>合并拆分冻结</h4><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">sheet.merge_cells(<span class="string">'A1:D3'</span>)</span><br><span class="line">sheet[<span class="string">'A1'</span>] = <span class="string">'merged'</span>                                    <span class="comment">#合并后单元格的值</span></span><br><span class="line"></span><br><span class="line">sheet.unmerge_cells(<span class="string">'A1:A2'</span>)</span><br><span class="line"></span><br><span class="line">sheet.freeze_panes = <span class="string">'A2'</span>                                 <span class="comment">#冻结左上部分</span></span><br></pre></td></tr></table></figure><h2 id="python处理CSV文件"><a href="#python处理CSV文件" class="headerlink" title="python处理CSV文件"></a>python处理CSV文件</h2><h3 id="CSV文件"><a href="#CSV文件" class="headerlink" title="CSV文件"></a>CSV文件</h3><p>csv全称’Comma-Separated Values‘，每行对应电子表格中的一行，单元格之间用逗号分隔。</p><ul><li>值没有类型，全为字符串</li><li>无多个工作表</li><li>不能嵌入图像或图表</li><li>无字体大小和颜色设置</li><li>无法操作单元格，宽高合并等</li></ul><h3 id="Reader对象"><a href="#Reader对象" class="headerlink" title="Reader对象"></a>Reader对象</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"></span><br><span class="line">openFile = open(<span class="string">'test.csv'</span>)                               <span class="comment">#返回一个File对象</span></span><br><span class="line">fileReader = csv.reader(openFile)                         <span class="comment">#返回一个Reader对象，按行读取</span></span><br><span class="line">fileData = list(fileReader)                               <span class="comment">#fileData[0][0]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> row <span class="keyword">in</span> fileReader:</span><br><span class="line">    print(<span class="string">'row'</span>+str(fileReader.line_num)+str(row))        <span class="comment">#对于大型CSV文件，避免将文件一次性装入内存</span></span><br></pre></td></tr></table></figure><h3 id="Write对象"><a href="#Write对象" class="headerlink" title="Write对象"></a>Write对象</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"></span><br><span class="line">openFile = open(<span class="string">'test.csv'</span>, <span class="string">'w'</span>, newline=<span class="string">''</span>)              <span class="comment">#返回一个File对象</span></span><br><span class="line">fileWrite = csv.writer(openFile)                          <span class="comment">#返回一个Reader对象，按行读取</span></span><br><span class="line">fileWrite.writerow([<span class="number">1</span>, <span class="string">'a,b'</span>, <span class="number">2</span>, <span class="string">'b'</span>])</span><br><span class="line">openfile.close()</span><br><span class="line"></span><br><span class="line">fileWrite = csv.writer(openFile, delimiter=<span class="string">'\t'</span>, lineterminator=<span class="string">'\n\n'</span>)</span><br><span class="line"><span class="comment">#delimiter指定分隔符 lineterminator指定行终止符，默认\n</span></span><br></pre></td></tr></table></figure><h2 id="python处理JSON文件"><a href="#python处理JSON文件" class="headerlink" title="python处理JSON文件"></a>python处理JSON文件</h2><p>JSON文件，全称JavaScript Object Notation，是JavaScript程序编写数据结构的原生方式，<br>JSON不能表示Pyton特有的对象，可以存储：字符串、整型、浮点型、布尔型、列表、字典和NoneType。</p><h3 id="loads"><a href="#loads" class="headerlink" title="loads()"></a>loads()</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">jsonString = <span class="string">'&#123;"name":"asher", "isCat":true, "num":1&#125;'</span></span><br><span class="line">jsonData = json.loads(jsonString)                         <span class="comment">#返回一个Python字典</span></span><br></pre></td></tr></table></figure><h3 id="dumps"><a href="#dumps" class="headerlink" title="dumps()"></a>dumps()</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">pythonData = <span class="string">'&#123;'</span>name<span class="string">':'</span>ashe<span class="string">r', '</span>isCat<span class="string">':True, '</span>num<span class="string">':1&#125;'</span></span><br><span class="line">jsonString = json.dumps(json)</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Excel</tag>
        <tag>CSV</tag>
        <tag>JSON</tag>
      </tags>
  </entry>
  <entry>
    <title>正则表达式复习</title>
    <url>/post/tech/regex-review/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>正则表达式复习<a id="more"></a></p><h2 id="常用方法-参数"><a href="#常用方法-参数" class="headerlink" title="常用方法,参数"></a>常用方法,参数</h2><h3 id="group-and-findall"><a href="#group-and-findall" class="headerlink" title="group() and findall()"></a>group() and findall()</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">regexDemo = re.compile(<span class="string">r'(\d)-(\d)'</span>) <span class="comment">#返回Regex对象, </span></span><br><span class="line">                                     <span class="comment">#r为原始字符串\不转义, </span></span><br><span class="line">                                     <span class="comment">#匹配括号须转义\(</span></span><br><span class="line">demo = regexDemo.search(<span class="string">''</span>) <span class="comment">#返回Match对象,仅包含第一次出现的文本</span></span><br><span class="line">demo1 = regexDemo.findall(<span class="string">''</span>) <span class="comment">#无分组返回一个字符串列表，有分组返回一个包含元组的列表，</span></span><br><span class="line">                              <span class="comment">#每一个元组对应一个字符串</span></span><br><span class="line">demo.group(<span class="number">0</span>) <span class="comment">#0 all but one, 1 first group, .groups() all</span></span><br></pre></td></tr></table></figure><h3 id="sub"><a href="#sub" class="headerlink" title="sub()"></a>sub()</h3><figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">regexDemo</span><span class="selector-class">.sub</span>(<span class="string">'sub'</span>,<span class="string">'subed'</span>) <span class="selector-id">#sub</span>替换<span class="selector-tag">subed</span>里匹配的字符串</span><br></pre></td></tr></table></figure><h3 id="re-DOTALL"><a href="#re-DOTALL" class="headerlink" title="re.DOTALL"></a>re.DOTALL</h3><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">re.compile(<span class="string">r'.*'</span>, re.DOTALL) <span class="comment">#可以匹配换行符</span></span><br></pre></td></tr></table></figure><h3 id="re-IGNORECASE-I"><a href="#re-IGNORECASE-I" class="headerlink" title="re.IGNORECASE/I"></a>re.IGNORECASE/I</h3><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">re.compile(<span class="string">r'.*'</span>, re.I) <span class="comment">#不区分大小写</span></span><br></pre></td></tr></table></figure><h3 id="re-VERBOSE"><a href="#re-VERBOSE" class="headerlink" title="re.VERBOSE"></a>re.VERBOSE</h3><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">re.compile(<span class="string">r'''</span></span><br><span class="line"><span class="string">            .*  #test</span></span><br><span class="line"><span class="string">            \d+ #test1</span></span><br><span class="line"><span class="string">            '''</span>, re.VERBOSE) <span class="comment">#忽略regex中的空白符和注释 组合参数用 |</span></span><br></pre></td></tr></table></figure><h2 id="常用符号"><a href="#常用符号" class="headerlink" title="常用符号"></a>常用符号</h2><h3><a href="#" class="headerlink" title="|"></a>|</h3><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">re.compile(<span class="string">r'a | b'</span>) <span class="comment">#匹配a或者b，同时出现匹配前者</span></span><br><span class="line">re.compile(<span class="string">r'a(aple | nchor)'</span>) <span class="comment">#匹配同一前缀</span></span><br></pre></td></tr></table></figure><h3 id="-1"><a href="#-1" class="headerlink" title="?"></a>?</h3><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">re.compile(<span class="string">r'bat(wo)?man'</span>) <span class="comment">#匹配?前的分组wo零次或一次</span></span><br><span class="line">re.compile(<span class="string">r'bat(wo&#123;,5&#125;?)man'</span>) <span class="comment">#后加?表示非贪心匹配,最少0次</span></span><br></pre></td></tr></table></figure><h3 id="-2"><a href="#-2" class="headerlink" title="*"></a>*</h3><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">re.compile(<span class="string">r'bat(wo)*man'</span>) <span class="comment">#匹配*前的分组wo零次或多次</span></span><br></pre></td></tr></table></figure><h3 id="-3"><a href="#-3" class="headerlink" title="+"></a>+</h3><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">re.compile(<span class="string">r'bat(wo)*man'</span>) <span class="comment">#匹配+前的分组wo一次或多次</span></span><br></pre></td></tr></table></figure><h3 id="-4"><a href="#-4" class="headerlink" title="{}"></a>{}</h3><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">re.compile(<span class="string">r'bat(wo)&#123;,5&#125;man'</span>) <span class="comment">#匹配&#123;&#125;前的分组wo指定次数(范围), 例中为0到5次 默认贪心匹配</span></span><br></pre></td></tr></table></figure><h3 id="-5"><a href="#-5" class="headerlink" title="^,$"></a>^,$</h3><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">re.compile(<span class="string">r'[^bat]'</span>) <span class="comment">#匹配不包含^后的任意字符,如batman匹配mn</span></span><br><span class="line">re.compile(<span class="string">r'^\d+$'</span>) <span class="comment">#匹配从开始到结束都是数字的字符串</span></span><br></pre></td></tr></table></figure><h2 id="字符分类"><a href="#字符分类" class="headerlink" title="字符分类"></a>字符分类</h2><p>自定义</p><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">re.compile(<span class="string">r'[0-9a-z]'</span>) <span class="comment">#[]内不需要转义</span></span><br></pre></td></tr></table></figure><h3 id="-6"><a href="#-6" class="headerlink" title="."></a>.</h3><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">re.compile(<span class="string">r'.at'</span>) <span class="comment">#匹配除换行外的任意一个字符，如cat，bat</span></span><br></pre></td></tr></table></figure><div class="table-container"><table><tbody><tr><td>\d 0-9的任何数字</td><td align="center">\D 除0-9外的任何字符</td></tr><tr><td>\w 任何字母、数字和下划线</td><td align="center">\W 类比</td></tr><tr><td>\s 空格、制表符或换行符</td><td align="center">\S类比</td></tr></tbody></table></div><h2 id="常用Regex"><a href="#常用Regex" class="headerlink" title="常用Regex"></a>常用Regex</h2><h3 id="email"><a href="#email" class="headerlink" title="email"></a>email</h3><figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">emailRegex</span> = re.compile(r<span class="string">'''(</span></span><br><span class="line"><span class="string">    [a-zA-Z0-9._%+-]+</span></span><br><span class="line"><span class="string">    @</span></span><br><span class="line"><span class="string">    [a-zA-Z0-9.-]+</span></span><br><span class="line"><span class="string">    \.[a-zA-Z]&#123;2,4&#125;</span></span><br><span class="line"><span class="string">    )'''</span>, re.VERBOSE)</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>tech</category>
      </categories>
      <tags>
        <tag>正则</tag>
        <tag>Regex</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo常用命令</title>
    <url>/post/Hexo/hexo-commands/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>Hexo常用命令<a id="more"></a><br>新建文章：<code>hexo new page --path _posts/Hexo/hexo-commands &quot;Hexo常用命令&quot;</code><br>生成静态文件和上传：<code>hexo g -d</code><br>本地运行：<code>hexo s --debug</code></p>]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Python基础</title>
    <url>/post/Python/Python-basis/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>python基础</p><a id="more"></a><h2 id="操作符"><a href="#操作符" class="headerlink" title="操作符"></a>操作符</h2><p>指数:<code>2**3=8</code><br>取整:<code>22/8=2</code> <code>22/8=2.75</code><br>表达式=操作符+值（可归约为一个值）<code>！=</code>语句<br>布尔操作符:and,or,not</p><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><p>整型(int),<br>浮点型(float),<br>字符串(str) ,<br><code>&#39;a&#39;+&#39;b&#39;=&#39;ab&#39;</code><br><code>&#39;a&#39;*3=&#39;aaa&#39;</code><br>布尔(Boolean),</p><h2 id="常用函数"><a href="#常用函数" class="headerlink" title="常用函数"></a>常用函数</h2><p><code>spam = input() //返回字符串类型</code><br><code>len(&#39;&#39;) //返回整型</code><br><code>str(),int(),float() //只能进行一次类型转换，如int(&#39;0.1&#39;)不正确 int(0.1)=0</code></p><h2 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h2><h3 id="路径操作"><a href="#路径操作" class="headerlink" title="路径操作"></a>路径操作</h3><figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">import <span class="built_in">os</span></span><br><span class="line"><span class="built_in">os</span>.getcwd()                         #当前工作目录</span><br><span class="line"><span class="built_in">os</span>.chdir(<span class="string">'C:\\users'</span>)               #更改路径</span><br><span class="line"><span class="built_in">os</span>.makedirs(<span class="string">'C:\\users\\test'</span>)      #创建目录</span><br><span class="line"><span class="built_in">os</span>.listdir(<span class="string">''</span>)                      #返回路径中包含的所有文件及文件夹的字符串列表</span><br><span class="line"></span><br><span class="line"><span class="built_in">os</span>.<span class="built_in">path</span>.join(<span class="string">'usr'</span>,<span class="string">'bin'</span>,<span class="string">'spam'</span>)    #usr\bin\spam</span><br><span class="line"><span class="built_in">os</span>.<span class="built_in">path</span>.join(<span class="string">'C:\\users'</span>,<span class="string">'a.txt'</span>)   #C:\users\a.txt</span><br><span class="line"><span class="built_in">os</span>.<span class="built_in">path</span>.abspath(<span class="string">''</span>)                 #返回参数的绝对路径的字符串形式</span><br><span class="line"><span class="built_in">os</span>.<span class="built_in">path</span>.isabs(<span class="string">''</span>)                   #参数为绝对路径返回True</span><br><span class="line"><span class="built_in">os</span>.<span class="built_in">path</span>.relpath(<span class="built_in">path</span>, start)        #返回从start路径到<span class="built_in">path</span>的相对路径的字符串形式</span><br><span class="line"><span class="built_in">os</span>.<span class="built_in">path</span>.dirname(<span class="string">''</span>) </span><br><span class="line">+ <span class="built_in">os</span>.<span class="built_in">path</span>.basename(<span class="string">''</span>)              #<span class="string">'C:\\users'</span>+<span class="string">'test.exe'</span></span><br><span class="line"><span class="built_in">os</span>.<span class="built_in">path</span>.split(<span class="string">''</span>)                   #返回包含dirname和basename的字符串元组</span><br><span class="line"><span class="string">''</span>.split(<span class="built_in">os</span>.<span class="built_in">path</span>.sep)               #返回一个包含路径中各文件夹名称的字符串列表</span><br><span class="line"><span class="built_in">os</span>.<span class="built_in">path</span>.getsize(<span class="string">''</span>)                 #返回文件的字节数</span><br><span class="line"><span class="built_in">os</span>.<span class="built_in">path</span>.exists(<span class="string">''</span>)                  #文件或文件夹存在，返回True</span><br><span class="line"><span class="built_in">os</span>.<span class="built_in">path</span>.isfile(<span class="string">''</span>)                  #文件存在，返回True</span><br><span class="line"><span class="built_in">os</span>.<span class="built_in">path</span>.isdir(<span class="string">''</span>)                   #文件夹存在，返回True</span><br></pre></td></tr></table></figure><h3 id="文件读写"><a href="#文件读写" class="headerlink" title="文件读写"></a>文件读写</h3><figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">file1</span> = open(<span class="string">''</span>，<span class="string">'w'</span>)               <span class="comment">#返回一个File对象，w写模式，a添加模式，r读模式</span></span><br><span class="line"><span class="attr">fileContent</span> = file1.read()</span><br><span class="line"><span class="attr">fileContent</span> = file1readlines()</span><br></pre></td></tr></table></figure><h3 id="文件复制删除"><a href="#文件复制删除" class="headerlink" title="文件复制删除"></a>文件复制删除</h3><figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">import shutil,<span class="built_in">os</span></span><br><span class="line">shutil.copy(source, destination)    #复制单个文件，destination为文件名则复制后改名，下同</span><br><span class="line">shutil.copytree(source, destination)#复制整个文件夹及其包含的文件和文件夹</span><br><span class="line">shutil.move(source, destination)    #移动单个文件，同名会复写</span><br><span class="line"><span class="built_in">os</span>.unlink(<span class="built_in">path</span>)                     #永久删除<span class="built_in">path</span>处的文件</span><br><span class="line"><span class="built_in">os</span>.rmdir(<span class="built_in">path</span>)                      #永久删除<span class="built_in">path</span>出的文件夹，必须为空</span><br><span class="line">shutil.rmtree(<span class="built_in">path</span>)                 #永久删除<span class="built_in">path</span>处的文件夹及其包含的文件及文件夹，可用send2trash</span><br><span class="line"><span class="built_in">os</span>.<span class="built_in">rename</span>(oldname,newname)          #用<span class="built_in">os</span>模块中的<span class="built_in">rename</span>方法对文件改名</span><br></pre></td></tr></table></figure><h3 id="变量保存"><a href="#变量保存" class="headerlink" title="变量保存"></a>变量保存</h3><figure class="highlight livecodeserver"><table><tr><td class="code"><pre><span class="line">import shelve, pprint</span><br><span class="line">shelfFile = shelve.<span class="built_in">open</span>(<span class="string">''</span>)         <span class="comment">#用shelve模块保存变量</span></span><br><span class="line"><span class="built_in">value</span> = [<span class="string">''</span>,<span class="string">''</span>]</span><br><span class="line">shelfFile[<span class="string">'keys'</span>] = <span class="built_in">value</span>           <span class="comment">#将value列表保存在shelfFile中，关联keys键值</span></span><br><span class="line"><span class="comment">#pprint.pformat(value)              #将value列表转换为字符串写入文件</span></span><br><span class="line"><span class="comment">#shelfFile.write('')                </span></span><br><span class="line">shelfFile.<span class="built_in">close</span>()</span><br></pre></td></tr></table></figure><h3 id="文件夹遍历"><a href="#文件夹遍历" class="headerlink" title="文件夹遍历"></a>文件夹遍历</h3><figure class="highlight pf"><table><tr><td class="code"><pre><span class="line"><span class="keyword">os</span>.walk(path)                       <span class="comment">#返回path的当前文件夹名称的字符串，foldername</span></span><br><span class="line">                                    <span class="comment">#当前文件夹子文件夹字符串列表，subfoldernames</span></span><br><span class="line">                                    <span class="comment">#当前文件夹中的文件的字符串列表,filename</span></span><br></pre></td></tr></table></figure><h2 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h2><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">import</span> traceback</span><br><span class="line">try:</span><br><span class="line">    raise Exception (<span class="string">''</span>)</span><br><span class="line">except:</span><br><span class="line">    <span class="literal">error</span>File = open(<span class="literal">error</span>Info.txt, <span class="string">'w'</span>)</span><br><span class="line">    <span class="literal">error</span>File.write(traceback.format_exc())             <span class="comment">#得到出错信息的字符串形式</span></span><br><span class="line">    <span class="literal">error</span>File.close()</span><br><span class="line"></span><br><span class="line"><span class="comment">#断言</span></span><br><span class="line">test = <span class="string">'ok'</span></span><br><span class="line">assert test == <span class="string">'ok'</span>, <span class="string">'The test need to be ok'</span>           <span class="comment">#解决赋值出错的定位问题</span></span><br></pre></td></tr></table></figure><h2 id="日志模块"><a href="#日志模块" class="headerlink" title="日志模块"></a>日志模块</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> logging                                          <span class="comment">#等级：DEBUG &lt;INFO &lt;WARNING &lt;ERROR &lt;CRITICAL</span></span><br><span class="line">logging.basicConfig(filename=<span class="string">''</span>,level=logging.DEBUG, format=<span class="string">' %(asctime)s - %(levelname)s - %(message)s'</span>)</span><br><span class="line">logging.debug(<span class="string">'debug'</span>)</span><br><span class="line">logging.info(<span class="string">'info'</span>)</span><br><span class="line">logging.disable(logging.CRITICAL)                       <span class="comment">#禁用CRITICAL及以下等级的所有消息</span></span><br></pre></td></tr></table></figure><h2 id="时间模块"><a href="#时间模块" class="headerlink" title="时间模块"></a>时间模块</h2><h3 id="time-time"><a href="#time-time" class="headerlink" title="time.time()"></a>time.time()</h3><p>返回自Unix纪元，即协调世界时间（UTC）：1970年1月1日0点 以来的秒数</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="comment">#简单测试程序执行时间</span></span><br><span class="line">startTime = time.time()</span><br><span class="line">function()</span><br><span class="line">endTime = time.time()</span><br></pre></td></tr></table></figure><h3 id="time-sleep"><a href="#time-sleep" class="headerlink" title="time.sleep()"></a>time.sleep()</h3><p>参数为秒数</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="comment">#for循环中sleep，按下CTRL+C可以停止并抛出KeyboardInterrupt异常</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">30</span>):</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br></pre></td></tr></table></figure><h3 id="round"><a href="#round" class="headerlink" title="round()"></a>round()</h3><p>四舍五入</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">round(<span class="number">1.125</span>, <span class="number">2</span>)                                         <span class="comment">#四舍五入至两位小数，不填则到整数</span></span><br></pre></td></tr></table></figure><h3 id="datetime-datetime"><a href="#datetime-datetime" class="headerlink" title="datetime.datetime()"></a>datetime.datetime()</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line">dt = datetime.datetime.now()                            <span class="comment">#返回一个datetime对象</span></span><br><span class="line">dt.year&gt;dt.microsecond                                  <span class="comment">#datetime对象支持四则和比较操作符</span></span><br><span class="line">datetime.datetime.fromtimestamp(time.time())</span><br></pre></td></tr></table></figure><h3 id="datetime-timedelta"><a href="#datetime-timedelta" class="headerlink" title="datetime.timedelta()"></a>datetime.timedelta()</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line">dt = datetime.datetime.now()                            <span class="comment">#返回一个datetime对象</span></span><br><span class="line">daysAfter = datetime.timedelta(days=<span class="number">13</span>)</span><br><span class="line">print(dt+daysAfter)                                     <span class="comment">#13天后的日期</span></span><br></pre></td></tr></table></figure><h3 id="datetime-strftime-和strptimr"><a href="#datetime-strftime-和strptimr" class="headerlink" title="datetime.strftime()和strptimr()"></a>datetime.strftime()和strptimr()</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line">dt = datetime.datetime.now()                            <span class="comment">#返回一个datetime对象</span></span><br><span class="line">dt.strftime(<span class="string">'%Y/%m/%d %H:%M:%S'</span>)                        <span class="comment">#datetime对象转换成字符串</span></span><br><span class="line">datetime.datetime.strptime(<span class="string">'2015/10/21 16:29:00'</span>, <span class="string">'%Y/%m/%d %H:%M:%S'</span>)</span><br></pre></td></tr></table></figure><p><img src="https://s2.ax1x.com/2020/02/17/3C1sYt.jpg" alt=""></p><h2 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> threading, time</span><br><span class="line">print(<span class="string">'Start of program.'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">takeANap</span><span class="params">()</span>:</span></span><br><span class="line">    time.sleep(<span class="number">5</span>)</span><br><span class="line">    print(<span class="string">'Wake up!'</span>)</span><br><span class="line"></span><br><span class="line">threadObj = threading.Thread(target=takeANap)</span><br><span class="line">threadObj.start()</span><br><span class="line"></span><br><span class="line">print(<span class="string">'End of program.'</span>)</span><br><span class="line"></span><br><span class="line">output:</span><br><span class="line">Start of program.</span><br><span class="line">End of program.</span><br><span class="line">Wake up!</span><br></pre></td></tr></table></figure><h3 id="传递参数"><a href="#传递参数" class="headerlink" title="传递参数"></a>传递参数</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"></span><br><span class="line">threadObj = threading.Thread(target=<span class="keyword">print</span>, args=[<span class="string">'Cats'</span>, <span class="string">'Dogs'</span>, <span class="string">'Frogs'</span>],kwargs=&#123;<span class="string">'sep'</span>: <span class="string">' &amp; '</span>&#125;)</span><br><span class="line">threadObj.start()</span><br><span class="line">print(<span class="string">'Cats'</span>, <span class="string">'Dogs'</span>, <span class="string">'Frogs'</span>, sep=<span class="string">' &amp; '</span>)                <span class="comment">#args常规参数，kwargs关键字参数</span></span><br></pre></td></tr></table></figure><h2 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h2><h3 id="批量有序重命名文件"><a href="#批量有序重命名文件" class="headerlink" title="批量有序重命名文件"></a>批量有序重命名文件</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os,re</span><br><span class="line">num = <span class="number">1</span></span><br><span class="line">path = <span class="string">'C:\\Users\\Desktop\\test\\'</span></span><br><span class="line"><span class="keyword">for</span> file <span class="keyword">in</span> os.listdir(path):</span><br><span class="line">    fileregex = re.compile(<span class="string">r'\.\w*'</span>)                    <span class="comment">#取得后缀名</span></span><br><span class="line">    extension = <span class="string">''</span>.join(fileregex.findall(file)[<span class="number">-1</span>:])   <span class="comment">#列表转换为字符串</span></span><br><span class="line">    newName = str(num)+extension</span><br><span class="line">    <span class="keyword">if</span> extension == <span class="string">''</span>:</span><br><span class="line">        <span class="keyword">continue</span>                                        <span class="comment">#过滤掉文件夹</span></span><br><span class="line">    os.rename(path+file, path+newName)</span><br><span class="line">    num = num+<span class="number">1</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo-NexT解决点进文章自动下滑到&lt;!-- more --&gt;后面</title>
    <url>/post/Hexo/hexo_issues/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>Hexo 版本v4.0.0 | 主题 – NexT.Gemini v7.6.0<br>若使用<code>&lt;!-- more --&gt;</code>标签来截取文章概要，当点击全文时，文章链接后会加上#more使页面自动下滑到<code>&lt;!-- more --&gt;</code>的后面<a id="more"></a><br>不想使用这一特性，有以下2个办法<br>1.找到<code>themes\next\layout\_macro</code>下的post.swig文件，将</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"btn"</span> <span class="attr">href</span>=<span class="string">"&#123;&#123; url_for(post.path) &#125;&#125;#more"</span> <span class="attr">rel</span>=<span class="string">"contents"</span>&gt;</span></span><br></pre></td></tr></table></figure><p>里的#more删除，即</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"btn"</span> <span class="attr">href</span>=<span class="string">"&#123;&#123; url_for(post.path) &#125;&#125;"</span> <span class="attr">rel</span>=<span class="string">"contents"</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2.将主题配置文件中的<code>scroll_to_more: true</code>改为<code>scroll_to_more: false</code>这个方法对我没用，可能NexT在新版本中移除了这项配置<br>其他问题可以参考<a href="https://github.com/theme-next/hexo-theme-next/issues" target="_blank" rel="noopener">https://github.com/theme-next/hexo-theme-next/issues</a>以及官方文档<a href="https://theme-next.org/docs/" target="_blank" rel="noopener">https://theme-next.org/docs/</a></p>]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Gris</title>
    <url>/post/Share/Gris/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>2019年TGA最具影响力游戏 steam售价57元<a id="more"></a></p><div id="aplayer-DrLbFXYY" class="aplayer aplayer-tag-marker meting-tag-marker" data-id="1331052668" data-server="netease" data-type="song" data-mode="circulation" data-autoplay="false" data-mutex="true" data-listmaxheight="340px" data-preload="auto" data-theme="#555" data-volume="0.8"></div><h2 id="关于这款游戏"><a href="#关于这款游戏" class="headerlink" title="关于这款游戏"></a>关于这款游戏</h2><p>Gris是一个充满希望的小姑娘，她由于生活中痛苦的经历而迷失于自己的世界里。她翩翩的裙摆折射着她跋涉于悲伤之中的旅途，为她赋予新能力，让她更好地在不断暗淡的现实世界中穿行。随着故事的展开，Gris的情感也会愈发成熟，学会从不同角度看待她的世界，并使用新能力发现新的可探索的路径</p><h2 id="感受"><a href="#感受" class="headerlink" title="感受"></a>感受</h2><p>Gris是一个2D横板解谜游戏。画风精美，配乐典雅，解谜难度不高，随流程探索剧情，原创配乐很好的渲染了氛围，场景切换令人惊艳</p><h2 id="截图"><a href="#截图" class="headerlink" title="截图"></a>截图</h2><table><thead><tr><th><img src="https://i.loli.net/2019/12/14/CY4u9QGW71SFzrA.jpg" alt=""></th><th align="center"><img src="https://i.loli.net/2019/12/15/GMqnCyiYVAHOKBc.jpg" alt=""></th></tr></thead><tbody><tr><td><img src="https://i.loli.net/2019/12/15/3SNq8xThBjan1s4.jpg" alt=""></td><td align="center"><img src="https://i.loli.net/2019/12/15/JmULEKfh47TlPYa.jpg" alt=""></td></tr><tr><td><img src="https://i.loli.net/2019/12/15/dlD7ELJTiWpSgwe.jpg" alt=""></td><td align="center"><img src="https://i.loli.net/2019/12/15/8HwJ9gCqQKloExt.jpg" alt=""></td></tr></tbody></table><h2 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h2><p>steam:<a href="https://store.steampowered.com/app/683320/GRIS/" target="_blank" rel="noopener">Gris</a><br>b站<a href="https://www.bilibili.com/video/av38100751" target="_blank" rel="noopener">剧情流程</a></p>]]></content>
      <categories>
        <category>Share</category>
      </categories>
      <tags>
        <tag>游戏</tag>
      </tags>
  </entry>
  <entry>
    <title>daliy</title>
    <url>/post/Life/daliy/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>生活记录<a id="more"></a></p><h2 id="2019-12-13"><a href="#2019-12-13" class="headerlink" title="2019.12.13"></a>2019.12.13</h2><p>连续打了一个月游戏，现在考研的书已经拿不起来，我的第一次考研基本失败了。脸上的痘痘到现在还没消，可能是吃异维A酸的副作用，情绪时而会不受控制的低落，会有一些报复性的放纵行为，在宿舍窝了一个月，很少出门也没有坚持跑步和健身，精神状态很差。</p><p>2019年即将过去，我必须尽快调整状态，列出以下要求：<br>1.十一点前必须睡觉，且睡前不准刷手机<br>2.冬天过后开始坚持跑步，间隔三天左右<br>3.不在白天一个人打游戏<br>4.尽量少接触电子屏幕，观察是否对痘痘有较大影响<br>5.坚持每个月至少写一点东西</p><p>ummm，听歌的时候很难集中注意力，先写到这</p><h2 id="2019-12-15"><a href="#2019-12-15" class="headerlink" title="2019.12.15"></a>2019.12.15</h2><p>今天买的书到了，《背对世界》《围城》《杀死一只知更鸟》<br>准备从新学一下python，顺序《Python编程快速上手》→《effective python》→《pyhton深度学习》<br>开始更新读书笔记</p><h2 id="2020-2-17"><a href="#2020-2-17" class="headerlink" title="2020.2.17"></a>2020.2.17</h2><p>《Python编程快速上手》看完，收获不大。以下为个人感受：作为有编程基础的人，这本书介绍基础并不详细，但易于上手，后面的项目主要是介绍python的几个实用的包和用法，适合无编程基础的人。<br>另附前几日雪中和雪后的后院图</p><table><thead><tr><th><img src="https://s2.ax1x.com/2020/02/17/3C6COH.jpg" alt=""></th><th align="center"><img src="https://s2.ax1x.com/2020/02/17/3Cyqm9.jpg" alt=""></th></tr></thead></table>]]></content>
      <categories>
        <category>Life</category>
      </categories>
  </entry>
</search>
